drop table if exists comments;
drop table if exists bookings;
drop table if exists items;
drop table if exists users;

create table if not exists users
(
    id    BIGINT       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(255) not null,
    email VARCHAR(512) NOT NULL UNIQUE,
    constraint USERS_PK
        primary key (id)
);

create table if not exists items
(
    id              BIGINT       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name            VARCHAR(255) not null,
    description     VARCHAR(512) not null,
    is_available    BOOLEAN      not null,
    owner_id        BIGINT,
    request_id      BIGINT,
    constraint ITEMS_PK
        primary key (id)
);

create table if not exists bookings
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_date TIMESTAMP,
    end_date   TIMESTAMP,
    item_id    BIGINT,
    booker_id  BIGINT,
    status     VARCHAR(10),
    constraint BOOKINGS_PK
        primary key (id)
);

create table if not exists requests
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    description  VARCHAR(512),
    requestor_id BIGINT,
    constraint REQUESTS_PK
        primary key (id)
);

create table if not exists comments
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text      VARCHAR(1000),
    item_id   BIGINT,
    author_id BIGINT,
    constraint COMMENTS_PK
        primary key (id)
);

alter table if exists ITEMS
    add constraint if not exists ITEMS_USERS_ID_FK
        foreign key (OWNER_ID) references USERS(ID);

alter table if exists COMMENTS
    add constraint if not exists COMMENTS_ITEMS_ID_FK
        foreign key (ITEM_ID) references ITEMS(ID);

alter table if exists COMMENTS
    add constraint if not exists COMMENTS_USERS_ID_FK
        foreign key (AUTHOR_ID) references USERS(ID);

alter table if exists BOOKINGS
    add constraint if not exists BOOKINGS_ITEMS_ID_FK
        foreign key (ITEM_ID) references ITEMS(ID);

alter table if exists BOOKINGS
    add constraint if not exists BOOKINGS_USERS_ID_FK
        foreign key (BOOKER_ID) references USERS(ID);